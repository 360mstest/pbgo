// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/chai2010/pbgo"

import "encoding/json"
import "net/rpc"
import "net/http"
import "regexp"
import "strings"

import "github.com/chai2010/pbgo"
import "github.com/julienschmidt/httprouter"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_5b3b7eb8ebc2f8fa, []int{0}
}
func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (dst *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(dst, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Message struct {
	Value                string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Array                []int32           `protobuf:"varint,2,rep,packed,name=array,proto3" json:"array,omitempty"`
	Dict                 map[string]string `protobuf:"bytes,3,rep,name=dict,proto3" json:"dict,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subfiled             *String           `protobuf:"bytes,4,opt,name=subfiled,proto3" json:"subfiled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_5b3b7eb8ebc2f8fa, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Message) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Message) GetDict() map[string]string {
	if m != nil {
		return m.Dict
	}
	return nil
}

func (m *Message) GetSubfiled() *String {
	if m != nil {
		return m.Subfiled
	}
	return nil
}

func init() {
	proto.RegisterType((*String)(nil), "hello_pb.String")
	proto.RegisterType((*Message)(nil), "hello_pb.Message")
	proto.RegisterMapType((map[string]string)(nil), "hello_pb.Message.DictEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = json.Marshal
var _ = http.ListenAndServe
var _ = regexp.Match
var _ = strings.Split
var _ = pbgo.PopulateFieldFromPath
var _ = httprouter.New

type HelloServiceInterface interface {
	Hello(in *String, out *String) error
	Echo(in *Message, out *Message) error
}

func RegisterHelloService(srv *rpc.Server, x HelloServiceInterface) error {
	if err := srv.RegisterName("HelloService", x); err != nil {
		return err
	}
	return nil
}

type HelloServiceClient struct {
	*rpc.Client
}

func DialHelloService(network, address string) (*HelloServiceClient, error) {
	c, err := rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &HelloServiceClient{Client: c}, nil
}

func (p *HelloServiceClient) Hello(in *String) (*String, error) {
	var out = new(String)
	if err := p.Client.Call("HelloService.Hello", in, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (p *HelloServiceClient) Echo(in *Message) (*Message, error) {
	var out = new(Message)
	if err := p.Client.Call("HelloService.Echo", in, out); err != nil {
		return nil, err
	}
	return out, nil
}

func HelloServiceHandler(svc HelloServiceInterface) http.Handler {
	var router = httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			for _, fieldPath := range re.FindAllString("/hello", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			for _, fieldPath := range re.FindAllString("/hello", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			for _, fieldPath := range re.FindAllString("/hello", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   Message
				protoReply Message
			)

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := svc.Echo(&protoReq, &protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_hello_5b3b7eb8ebc2f8fa) }

var fileDescriptor_hello_5b3b7eb8ebc2f8fa = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xd1, 0x4a, 0xf3, 0x30,
	0x18, 0xa5, 0xeb, 0xda, 0x7f, 0xfb, 0xf6, 0x8b, 0x33, 0x28, 0x96, 0x2a, 0x52, 0xea, 0x4d, 0x2f,
	0xa4, 0x99, 0xf5, 0x42, 0xe9, 0x8d, 0x88, 0x2b, 0x0c, 0x99, 0x20, 0xdd, 0xee, 0xa5, 0xcd, 0x62,
	0x1b, 0xac, 0xcb, 0xe8, 0xb2, 0x41, 0xdf, 0xd0, 0x1b, 0x5f, 0xc0, 0x87, 0xf0, 0x0d, 0x04, 0x69,
	0xba, 0x6e, 0x42, 0xbd, 0x09, 0x39, 0x27, 0x27, 0xe7, 0x9c, 0xe4, 0x83, 0x5e, 0x4a, 0xb3, 0x8c,
	0xbb, 0x8b, 0x9c, 0x0b, 0x8e, 0x3a, 0x12, 0x3c, 0x2f, 0x62, 0xf3, 0x3c, 0x61, 0x22, 0x5d, 0xc5,
	0x2e, 0xe1, 0x6f, 0x98, 0xa4, 0x11, 0xf3, 0x06, 0x97, 0x03, 0xbc, 0x88, 0x13, 0x2e, 0x97, 0x4a,
	0x6e, 0x9f, 0x81, 0x3e, 0x11, 0x39, 0x9b, 0x27, 0xe8, 0x10, 0xb4, 0x75, 0x94, 0xad, 0xa8, 0xa1,
	0x58, 0x8a, 0xd3, 0x0d, 0x2b, 0x60, 0x7f, 0x28, 0xf0, 0xef, 0x91, 0x2e, 0x97, 0x51, 0x42, 0xff,
	0x56, 0x94, 0x6c, 0x94, 0xe7, 0x51, 0x61, 0xb4, 0x2c, 0xd5, 0xd1, 0xc2, 0x0a, 0x20, 0x0c, 0xed,
	0x19, 0x23, 0xc2, 0x50, 0x2d, 0xd5, 0xe9, 0x79, 0x27, 0x6e, 0xdd, 0xca, 0xdd, 0x98, 0xb9, 0x43,
	0x46, 0x44, 0x30, 0x17, 0x79, 0x11, 0x4a, 0x21, 0xba, 0x80, 0xce, 0x72, 0x15, 0xbf, 0xb0, 0x8c,
	0xce, 0x8c, 0xb6, 0xa5, 0x38, 0x3d, 0xaf, 0xbf, 0xbb, 0x54, 0x55, 0x0c, 0xb7, 0x0a, 0xf3, 0x1a,
	0xba, 0x5b, 0x03, 0xd4, 0x07, 0xf5, 0x95, 0x16, 0x9b, 0x56, 0xe5, 0x76, 0xd7, 0xb4, 0xf5, 0xab,
	0xa9, 0xdf, 0xba, 0x51, 0xbc, 0x77, 0x05, 0xfe, 0x8f, 0x4a, 0xdb, 0x09, 0xcd, 0xd7, 0x8c, 0x50,
	0x94, 0x81, 0x26, 0x31, 0x6a, 0xc4, 0x99, 0x0d, 0xc6, 0xbe, 0xfd, 0xfc, 0xfa, 0x1e, 0xfb, 0xb0,
	0x87, 0xe5, 0x01, 0xf6, 0xa5, 0xaf, 0xa9, 0x57, 0xd0, 0xeb, 0x83, 0x3e, 0x0c, 0xc6, 0xc1, 0x34,
	0x40, 0x35, 0xb3, 0x0f, 0xda, 0xd3, 0xdd, 0xf4, 0x7e, 0x54, 0x13, 0xe8, 0x01, 0xda, 0x01, 0x49,
	0x39, 0x3a, 0x68, 0x7c, 0x88, 0xd9, 0xa4, 0xec, 0xd3, 0x32, 0xee, 0x18, 0x8e, 0x30, 0x25, 0x29,
	0xc7, 0x7e, 0xfd, 0x7a, 0x57, 0xc6, 0xc6, 0xba, 0x9c, 0xe0, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4e, 0x9f, 0x0d, 0x1e, 0xff, 0x01, 0x00, 0x00,
}
